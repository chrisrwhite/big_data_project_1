graph1 = read.table('out.subelj_jdk_jdk')
graph1 = read.table(file = 'out.subelj_jdk_jdk')
graph1 = read.table(file = "out.subelj_jdk_jdk")
getwd()
graph1 = read.table(file = "/home/chris/Documents/R/big_data_project_1/out.subelj_jdk_jdk")
list.files("/home/chris/Documents/R/big_data_project_1/")
graph1 = read.table(file = "/home/chris/Documents/R/big_data_project_1/out.subelj_jdk_jdk.txt")
graph1 = read.table(file = "/home/chris/Documents/R/big_data_project_1/out.subelj_jdk_jdk.txt")
graph1 = read.table(file = "/home/chris/Documents/R/big_data_project_1/out.subelj_jdk_jdk")
graph1 = read.table(file = "/home/chris/Documents/R/big_data_project_1/out.subelj_jdk_jdk")
edges1 = read.table(file = "/home/chris/Documents/R/big_data_project_1/out.subelj_jdk_jdk")
# convert to matrix: 
em <-as.matrix(edges1)
v1 <- em[<$rows>:1], v2<-em[#rows:2]
baskets.df <- as.data.frame(em)
relations <- as.data.frame(em)
g<-graph.data.frame(relations,directed=TRUE) 
plot(g)
g<-graph.data.frame(relations,directed=TRUE) 
g<-graph.data.frame(relations,directed=TRUE)
g<-graph.data.frame(relations,directed=TRUE)
install.packages("igraph")
library('igraph')
edges1 = read.table(file = "/home/chris/Documents/R/big_data_project_1/out.subelj_jdk_jdk")
# convert to matrix: 
em <-as.matrix(edges1)
# extract vectors convert to dataframe:
relations <- as.data.frame(em)
g<-graph.data.frame(relations,directed=TRUE)
plot(g)
edges1 = read.table(file = "/home/chris/Documents/R/big_data_project_1/out.subelj_jdk_jdk")
# convert to matrix: 
em <-as.matrix(edges1)
# extract vectors convert to dataframe:
relations <- as.data.frame(em)
g<-graph.data.frame(relations,directed=TRUE)
plot(g)
g_simp = simplify(g, remove.multiple = TRUE, remove.loops = TRUE,
edge.attr.comb = igraph_opt("edge.attr.comb"))
plot(g_simp)
g_simp <- simplify(g,remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = list(weight = "sum", function(x)length(x)))
plot(g_simp)
View(g)
View(g)
View(g_simp)
View(g_simp)
hist(g_simp)
degree(g)
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
g_degrees = degree(g)
g_degrees_histogram <- as.data.frame(table(g_degrees))
g_degrees_histogram[,1] <- as.numeric(g_degrees_histogram[,1])
ggplot(g_degrees_histogram, aes(x = G.degrees, y = Freq)) +
geom_point() +
scale_x_continuous("Degree\n(nodes with this amount of connections)",
breaks = c(1, 3, 10, 30, 100, 300),
trans = "log10") +
scale_y_continuous("Frequency\n(how many of them)",
breaks = c(1, 3, 10, 30, 100, 300, 1000),
trans = "log10") +
ggtitle("Degree Distribution (log-log)") +
theme_bw()
ggplot(g_degrees_histogram, aes(x = g_degrees, y = Freq)) +
geom_point() +
scale_x_continuous("Degree\n(nodes with this amount of connections)",
breaks = c(1, 3, 10, 30, 100, 300),
trans = "log10") +
scale_y_continuous("Frequency\n(how many of them)",
breaks = c(1, 3, 10, 30, 100, 300, 1000),
trans = "log10") +
ggtitle("Degree Distribution (log-log)") +
theme_bw()
View(g_degrees_histogram)
View(g_degrees_histogram)
ggplot(g_degrees_histogram, aes(x = g_degrees, y = Freq)) +
geom_point() +
scale_x_continuous("Degree\n(nodes with this amount of connections)",
breaks = c(1, 3, 10, 30, 100, 300)) +
scale_y_continuous("Frequency\n(how many of them)",
breaks = c(1, 3, 10, 30, 100, 300, 1000),
trans = "log10") +
ggtitle("Degree Distribution (log-log)") +
theme_bw()
ggplot(g_degrees_histogram, aes(x = g_degrees, y = Freq)) +
geom_point() +
scale_x_continuous("Degree\n(nodes with this amount of connections)",
breaks = c(1, 3, 10, 30, 100, 300)) +
scale_y_continuous("Frequency\n(how many of them)",
breaks = c(1, 3, 10, 30, 100, 300, 1000)) +
ggtitle("Degree Distribution (log-log)") +
theme_bw()
ggplot(g_degrees_histogram, aes(x = g_degrees, y = Freq)) +
geom_point() +
scale_x_continuous("Degree\n(nodes with this amount of connections)",
breaks = c(1, 3, 10, 30, 100, 300),
trans = "log10") +
scale_y_continuous("Frequency\n(how many of them)",
breaks = c(1, 3, 10, 30, 100, 300, 1000),
trans = "log10") +
ggtitle("Degree Distribution (log-log)") +
theme_bw()
View(g_degrees_histogram)
View(g_degrees_histogram)
ggplot(g_degrees_histogram, aes(x = g_degrees, y = Freq)) +
scale_x_continuous("Degree\n(nodes with this amount of connections)",
breaks = c(1, 3, 10, 30, 100, 300),
trans = "log10") +
scale_y_continuous("Frequency\n(how many of them)",
breaks = c(1, 3, 10, 30, 100, 300, 1000),
trans = "log10") +
ggtitle("Degree Distribution (log-log)") +
theme_bw()
ggplot(g_degrees_histogram, aes(x = g_degrees, y = Freq)) +
geom_bar() +
scale_x_continuous("Degree\n(nodes with this amount of connections)",
breaks = c(1, 3, 10, 30, 100, 300),
trans = "log10") +
scale_y_continuous("Frequency\n(how many of them)",
breaks = c(1, 3, 10, 30, 100, 300, 1000),
trans = "log10") +
ggtitle("Degree Distribution (log-log)") +
theme_bw()
geom_histogram(mapping = NULL, data = g_degrees_histogram, stat = "bin",
position = "stack", ..., binwidth = NULL, bins = NULL,
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)
geom_histogram(mapping = NULL, data = g_degrees_histogram, stat = "bin",
position = "stack",  binwidth = NULL, bins = NULL,
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)
geom_histogram( data = g_degrees_histogram, stat = "bin",
position = "stack",  binwidth = 10, bins = 10)
geom_histogram( data = g_degrees_histogram, stat = "bin",
position = "stack",  binwidth = 10, bins = 10)
geom_histogram( data = g_degrees_histogram, stat = "bin",
position = "stack",  binwidth = 10, bins = 10)
geom_histogram( data = g_degrees_histogram, stat = "bin",
position = "stack",  binwidth = 10, bins = 10)
geom_histogram( data = g_degrees_histogram, stat = "bin",
position = "stack",  binwidth = 10, bins = 10)
geom_histogram( data = g_degrees_histogram, stat = "bin",
position = "stack",  binwidth = 10, bins = 10)
ggplot(g_degrees_histogram, aes(x = g_degrees, y = Freq)) +
geom_point() +
scale_x_continuous("Degree\n(nodes with this amount of connections)",
breaks = c(1, 3, 10, 30, 100, 300),
trans = "log10") +
scale_y_continuous("Frequency\n(how many of them)",
breaks = c(1, 3, 10, 30, 100, 300, 1000),
trans = "log10") +
ggtitle("Degree Distribution (log-log)") +
theme_bw()
View(g_degrees_histogram)
View(g_degrees_histogram)
ggplot(g_degrees_histogram, aes(x = g_degrees, y = Freq)) +
geom_point() +
scale_x_continuous("Degree\n(nodes with this amount of connections)",
breaks = c(1, 3, 10, 30, 100, 300),
trans = "log10") +
scale_y_continuous("Frequency\n(how many of them)",
breaks = c(1, 3, 10, 30, 100, 300, 1000),
trans = "log10") +
ggtitle("Degree Distribution (log-log)") +
theme_bw()
library('igraph')
library("ggplot2")
edges1 = read.table(file = "/home/chris/Documents/R/big_data_project_1/out.subelj_jdk_jdk")
# convert to matrix: 
em <-as.matrix(edges1)
# extract vectors convert to dataframe:
relations <- as.data.frame(em)
g<-graph.data.frame(relations,directed=TRUE)
g_degrees = degree(g)
g_degrees_histogram <- as.data.frame(table(g_degrees))
g_degrees_histogram[,1] <- as.numeric(g_degrees_histogram[,1])
g_degrees_histogram_filt = g_degrees_histogram[g_degrees_histogram$Freq < 400,]
ggplot(g_degrees_histogram, aes(x = g_degrees, y = Freq)) +
geom_bar() +
scale_x_continuous("Degree\n(nodes with this amount of connections)",
breaks = c(1, 3, 10, 30, 100, 300),
trans = "log10") +
scale_y_continuous("Frequency\n(how many of them)",
breaks = c(1, 3, 10, 30, 100, 300, 1000),
trans = "log10") +
ggtitle("Degree Distribution (log-log)") +
theme_bw()
# geom_histogram( data = g_degrees_histogram, stat = "bin",
#                position = "stack",  binwidth = 10, bins = 10)
g_simp = simplify(g, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
g_simp = delete.verticies(g_simp,  V(g_simp)[ degree(g_simp) < 100 ] )
# g_simp <- simplify(g,remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = list(weight = "sum", function(x)length(x)))
plot(g_simp)
g_simp = delete.vertices(g_simp, [ degree(g_simp) < 100 ] )
g_simp = delete.vertices(g_simp, degree(g_simp) < 100  )
plot(g_simp)
g_simp = delete.vertices(g_simp, degree(g_simp) < 400  )
# g_simp <- simplify(g,remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = list(weight = "sum", function(x)length(x)))
plot(g_simp)
g_simp = simplify(g, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
g_simp = delete.vertices(g_simp, degree(g_simp) < 400  )
# g_simp <- simplify(g,remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = list(weight = "sum", function(x)length(x)))
plot(g_simp)
g_simp = simplify(g, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
g_simp = delete.vertices(g_simp, degree(g_simp) < 300  )
# g_simp <- simplify(g,remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = list(weight = "sum", function(x)length(x)))
plot(g_simp)
#find best layout
layouts <- grep("^layout_", ls("package:igraph"), value=TRUE)[-1]
# Remove layouts that do not apply to our graph.
layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama|tree", layouts)]
par(mfrow=c(3,3), mar=c(1,1,1,1))
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(g_simp))
plot(g_simp, edge.arrow.mode=0, layout=l, main=layout) }
g_simp = delete.vertices(g_simp, degree(g_simp) < 200  )
# g_simp <- simplify(g,remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = list(weight = "sum", function(x)length(x)))
plot(g_simp)
#find best layout
layouts <- grep("^layout_", ls("package:igraph"), value=TRUE)[-1]
# Remove layouts that do not apply to our graph.
layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama|tree", layouts)]
par(mfrow=c(3,3), mar=c(1,1,1,1))
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(g_simp))
plot(g_simp, edge.arrow.mode=0, layout=l, main=layout) }
g_simp = simplify(g, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
g_simp = delete.vertices(g_simp, degree(g_simp) < 200  )
# g_simp <- simplify(g,remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = list(weight = "sum", function(x)length(x)))
plot(g_simp)
#find best layout
layouts <- grep("^layout_", ls("package:igraph"), value=TRUE)[-1]
# Remove layouts that do not apply to our graph.
layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama|tree", layouts)]
par(mfrow=c(3,3), mar=c(1,1,1,1))
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(g_simp))
plot(g_simp, edge.arrow.mode=0, layout=l, main=layout) }
closness(g_simp)
closeness(g_simp)
closeness(g)
source('~/Documents/R/big_data_project_1/project_1.R')
#graph Metrics
closeness(g_simp)
gden(g_simp)
graph.density(g_simp, loops=TRUE)
connectedness(g_simp)
vertex_connectivity(g_simp)
vertex_connectivity(g_simp)
is_connected(g_simp)
is_connected(g_simp.adj)
is_connected(g)
is.connected(g)
is.connected(g_simp)
connectedness(g_simp)
install.packages("rgraph")
geodist(g_simp)
distance_table(graph, directed = TRUE)
distance_table(g_simp, directed = TRUE)
plot(g_simp)
ego <- ego.extract(g_simp)
ego <- ego_extract(g_simp)
closeness(g_simp)
betweenness(g_simp)
eigen_centrality(graph, directed = TRUE, scale = TRUE, weights = NULL, options = arpack_defaults)
# Eigenvector Centrality
eigen_centrality(g_simp, directed = TRUE, scale = TRUE, weights = NULL, options = arpack_defaults)
eigen_centrality(g_simp, directed = TRUE)
eigen_centrality(g_simp, directed = TRUE)
eigen_centrality(g_simp, directed = TRUE)
eigen_centrality(g_simp, directed = TRUE)
eigen_centrality(g, directed = TRUE)
eigen_centrality(g_simp, directed = TRUE)
# 5) Page Rank
page_rank(g_simp,  directed = TRUE)
centr_betw(g_simp, directed = TRUE)
vertex.attributes(g_simp)
adjmatrix <- as_adjacency_matrix(g_simp)
adjmatrix
E(g_simp)$weight <- rnorm(ecount(g_simp))
V(g_simp)$weight <- rnorm(vcount(g_simp))
g_simp[1:5,1:9]
sg <- induced_subgraph(g_simp, which(g_simp$weight>0.7))
plot(sg, edge.label = round(E(sg)$weight,3))
sg <- induced_subgraph(g_simp, which(g_simp$weight>0.7))
View(sg)
View(sg)
sg <- induced_subgraph(g_simp, which(g_simp$weight>0.2))
plot(sg, edge.label = round(E(sg)$weight,3))
sg <- induced_subgraph(g_simp, which(g_simp$weight>0.2))
sg <- induced_subgraph(g_simp, which(g_simp$weight>0.02))
sg <- induced_subgraph(g_simp, which(g_simp$weight>0.02))
sg <- induced_subgraph(g_simp, which(g_simp$weight>0.02))
sg <- induced_subgraph(g_simp, which(g_simp$weight>0.02))
# 9cont) add to visalization
sg <- induced_subgraph(g_simp, which(g_simp$weight>0.02))
plot(sg, edge.label = round(E(sg)$weight,3))
# 9cont) add to visalization
sg <- induced_subgraph(g_simp, wg_simp$weight)
# 9cont) add to visalization
sg <- induced_subgraph(g_simp, g_simp$weight)
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
plot(sg, edge.label = round(E(sg)$weight,3))
